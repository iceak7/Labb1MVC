// <auto-generated />
using System;
using Labb1MVC.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Labb1MVC.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220901095816_Initital Create")]
    partial class InititalCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Labb1MVC.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfBooksInStock")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalNumberOfBooks")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "J.K Rowling",
                            NumberOfBooksInStock = 5,
                            Title = "Harry Potter",
                            TotalNumberOfBooks = 7
                        },
                        new
                        {
                            BookId = 2,
                            Author = "Dan Brown",
                            NumberOfBooksInStock = 3,
                            Title = "Da Vinci-Koden",
                            TotalNumberOfBooks = 4
                        },
                        new
                        {
                            BookId = 3,
                            Author = "C.S Lewis",
                            NumberOfBooksInStock = 6,
                            Title = "Berättelsen om Narnia",
                            TotalNumberOfBooks = 7
                        },
                        new
                        {
                            BookId = 4,
                            Author = "Suzanne Collins",
                            NumberOfBooksInStock = 10,
                            Title = "Hungerspelen",
                            TotalNumberOfBooks = 11
                        });
                });

            modelBuilder.Entity("Labb1MVC.Models.BookBorrow", b =>
                {
                    b.Property<int>("BookBorrowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnLatestDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Returned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BookBorrowId");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BookBorrows");

                    b.HasData(
                        new
                        {
                            BookBorrowId = 1,
                            BookId = 1,
                            BorrowDate = new DateTime(2022, 8, 15, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 2,
                            ReturnLatestDate = new DateTime(2022, 9, 15, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Returned = false
                        },
                        new
                        {
                            BookBorrowId = 2,
                            BookId = 1,
                            BorrowDate = new DateTime(2022, 8, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 3,
                            ReturnLatestDate = new DateTime(2022, 9, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Returned = false
                        },
                        new
                        {
                            BookBorrowId = 3,
                            BookId = 2,
                            BorrowDate = new DateTime(2022, 8, 25, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            ReturnLatestDate = new DateTime(2022, 9, 25, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Returned = false
                        },
                        new
                        {
                            BookBorrowId = 4,
                            BookId = 4,
                            BorrowDate = new DateTime(2022, 8, 30, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 3,
                            ReturnLatestDate = new DateTime(2022, 9, 30, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Returned = false
                        },
                        new
                        {
                            BookBorrowId = 5,
                            BookId = 3,
                            BorrowDate = new DateTime(2022, 8, 24, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 4,
                            ReturnLatestDate = new DateTime(2022, 9, 24, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Returned = false
                        },
                        new
                        {
                            BookBorrowId = 6,
                            BookId = 4,
                            BorrowDate = new DateTime(2022, 7, 24, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            ReturnLatestDate = new DateTime(2022, 8, 24, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Returned = true,
                            ReturnedDate = new DateTime(2022, 8, 20, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookBorrowId = 7,
                            BookId = 3,
                            BorrowDate = new DateTime(2022, 7, 29, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 2,
                            ReturnLatestDate = new DateTime(2022, 8, 29, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Returned = true,
                            ReturnedDate = new DateTime(2022, 8, 5, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Labb1MVC.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("PhoneNr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "Vägen 1",
                            City = "Halmstad",
                            Name = "Anders Andersson",
                            PhoneNr = "0733333333",
                            ZipCode = "30291"
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "Vägen 10",
                            City = "Stockholm",
                            Name = "Sven Svensson",
                            PhoneNr = "0744444444",
                            ZipCode = "60291"
                        },
                        new
                        {
                            CustomerId = 3,
                            Address = "Gatan 1",
                            City = "Göteborg",
                            Name = "Göran Göransson",
                            PhoneNr = "075555555",
                            ZipCode = "40291"
                        },
                        new
                        {
                            CustomerId = 4,
                            Address = "Gränden 1",
                            City = "Borås",
                            Name = "Karl Karlsson",
                            PhoneNr = "07666666",
                            ZipCode = "20291"
                        });
                });

            modelBuilder.Entity("Labb1MVC.Models.BookBorrow", b =>
                {
                    b.HasOne("Labb1MVC.Models.Book", "Book")
                        .WithMany("BookBorrows")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labb1MVC.Models.Customer", "Customer")
                        .WithMany("BookBorrows")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
